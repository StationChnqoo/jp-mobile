apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

react {
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def appName = project.env.get("APP_NAME") ?: "JP-Mobile"
def timeStamp = new Date().format("yyyyMMdd_HHmmss")
def packageName = project.env.get("APP_PACKAGE_NAME") ?: "net.cctv3.jp"

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    namespace "com.jp"

    defaultConfig {
        // applicationId "com.jp"
        applicationId project.env.get("APP_PACKAGE_NAME")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        resValue "string", "app_name", appName
        resValue "string", "build_config_package", "com.jp"
        // 支持的 ABI 架构
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

    // 启用 ABI 拆分
    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86"
            universalApk true // 启用生成 universal APK
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildTypeName = variant.buildType.name
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            def newName = "${project.env.get("APP_NAME")}_${buildTypeName}_${abi ?: "universal"}_${timeStamp}.apk"
            outputFileName = newName
        }
    }
    
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
